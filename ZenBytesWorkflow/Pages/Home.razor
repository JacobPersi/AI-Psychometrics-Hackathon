@page "/"
@using System.Text.Json
@using ZenBytesWorkflow.Model

@inject IJSRuntime JS
@inject IDialogService DialogService

<style>
.mud-ltr {
	overflow:visible !important;
}
</style>

<PageTitle>Home</PageTitle>

<MudPaper Class="w-full h-full flex flex-col bg-zinc-100">

	<MudStepper Class="flex-auto flex flex-col mx-32" ActiveIndexChanged="(index) => OnStepperIndexChanged(index)">
		<!-- Step 1. -->

		<MudStep Title="Data Upload" Class="h-full flex-auto">
			<MudPaper Class="h-full p-5">

				<h1>1. Data Upload</h1>

				<MudAlert Severity="Severity.Info" Class="mt-2">
					Upload the <b>textual data</b> you'd like to process. <br />
					This can include anything from journal entries to social media posts or even biometric data. <br /> <b>Any text-based information that sheds light on mental wellbeing can be processed</b>.
				</MudAlert>

				<div class="flex">
					<div class="mt-3 border rounded w-20 p-2 flex flex-row cursor-pointer shadow-lg" @onclick="NewTextInput">
						<MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Info" />
						<MudText Color="Color.Info" Class="ml-1">Add</MudText>
					</div>
					<div class="ml-3 mt-3 pl-3 border rounded w-28 p-2 flex flex-row cursor-pointer shadow-lg" @onclick="UploadTextInputs">
						<MudIcon Icon="@Icons.Material.Filled.Upload" Color="Color.Info" />
						<MudText Color="Color.Info" Class="ml-1">Upload</MudText>
					</div>
				</div>

				<div class="mt-3">
					<MudExpansionPanels>
						@for (var i = 0; i < TextInputs.Count; i++)
						{
							var index = (i + 1).ToString();
							var textInput = TextInputs[i];
							<MudExpansionPanel Text="@textInput.DisplayName" @bind-Expanded="@textInput.Expanded" IsInitiallyExpanded="false">
								<TitleContent>
									@if (textInput.Expanded)
									{
										<MudText><strong>Editing Item @index:</strong></MudText>
									}
									else
									{
										<MudText><strong>Item @index:</strong> @textInput.DisplayName @(textInput.DateTime != null ? " - " + textInput.DateTime.Value.ToString("MMMM dd, yyyy") : "")</MudText>
									}
								</TitleContent>
								<ChildContent>
									<MudTextField @bind-Value="@textInput.DisplayName" Label="Item Name" Class="pb-2" />
									<MudDatePicker Label="Item Date" @bind-Date="@textInput.DateTime" Class="py-2" />
									<MudTextField T="string" Label="Item Text" Variant="Variant.Outlined" Text="@textInput.TextBody" Lines="3" />

									<div class="mt-2 border rounded shadow-lg w-24 p-2 flex flex-row cursor-pointer" @onclick="() => DeleteTextInput(textInput)">
										<MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Error" />
										<MudText Color="Color.Error" Class="ml-1">Delete</MudText>
									</div>

								</ChildContent>
							</MudExpansionPanel>
						}
					</MudExpansionPanels>

				</div>

			</MudPaper>
		</MudStep>

		<!-- Step 2. -->
		<MudStep Title="Workflow Configuration" Class="h-full flex-auto">
			<MudPaper Class="h-full p-5 flex flex-col">

				<div class="flex flex-row h-full mt-2">
					<div class="flex-auto h-full flex flex-col">

						<h1>2. Workflow Configuration</h1>

						<MudAlert Severity="Severity.Info" Class="mt-2">
							Configure the processing workflow associated with the construct of interest. <br />
							This will take the form of a series of sequential processing steps associated with different linguistic features.
						</MudAlert>

						<div class="flex">

							<div class="w-128 mt-2">
								<MudSelect Class="w-128" Label="Selected Workflow" T="Workflow" @bind-Value="CurrentWorkflow" @bind-Value:after="() => OnSelectedWorkflowChanged()">
									@for (var i = 0; i < Workflows.Count; i++)
									{
										var index = (i + 1).ToString();
										var workflow = Workflows[i];
										<MudSelectItem Value="workflow"><strong>@index.</strong> @workflow.Title</MudSelectItem>
									}
								</MudSelect>
							</div>

							<div class="m-4 mb-1 ml-2 border rounded w-24 pl-4 p-2 flex flex-row cursor-pointer shadow">
								<MudIcon Icon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Info" />
								<MudText Color="Color.Info" Class="ml-1">New</MudText>
							</div>
							<div class="m-4 mb-1 ml-0 border rounded w-24 pl-4 p-2 flex flex-row cursor-pointer shadow">
								<MudIcon Icon="@Icons.Material.Filled.Save" Color="Color.Info" />
								<MudText Color="Color.Info" Class="ml-1">Open</MudText>
							</div>
							<div class="m-4 mb-1 ml-0 border rounded w-24 p-2 pl-3 flex flex-row cursor-pointer shadow">
								<MudIcon Icon="@Icons.Material.Filled.Save" Color="Color.Info" />
								<MudText Color="Color.Info" Class="ml-1">Save</MudText>
							</div>
							<div class="m-4 mb-1 ml-0 border rounded w-32 p-2 pl-3 flex flex-row cursor-pointer shadow">
								<MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Info" />
								<MudText Color="Color.Info" Class="ml-1">Add Node</MudText>
							</div>
						</div>

						<div class="flex-auto bg-white border shadow-lg">
							<CascadingValue Value="Diagram" IsFixed="true">
								<DiagramCanvas Class="cursor-default"></DiagramCanvas>
							</CascadingValue>
						</div>
					</div>

					<div class="w-1/2 h-full border-dashed">
						<div class="px-4">

							@if (SelectedPrompt is null)
							{
								<MudText class="pt-6">Please select a prompt to configure it!</MudText>
								<span></span>
							}
							else
							{
								<MudText class="pb-2">Editing Selected Prompt</MudText>

								<MudTextField @bind-Value="@SelectedPrompt.Title" Label="Prompt Name" Class="pb-2" />

								<MudSelect @bind-Value="SelectedPrompt.NodeType" Variant="Variant.Outlined" Label="Prompt Type" Class="pb-2">
									<MudSelectItem Value="@SelectedPrompt.NodeType">@SelectedPrompt.NodeType</MudSelectItem>
								</MudSelect>

								<MudTextField T="string" Label="Role" Variant="Variant.Outlined" Text="@SelectedPrompt.Role" Lines="3" Class="pb-2" />

								<MudTextField T="string" Label="Task" Variant="Variant.Outlined" Text="@SelectedPrompt.Task" Lines="3" Class="pb-2" />

								<MudTextField T="string" Label="Context" Variant="Variant.Outlined" Text="@SelectedPrompt.Context" Lines="10" Class="pb-2" />

								<MudTextField T="string" Label="Examples" Variant="Variant.Outlined" Text="@SelectedPrompt.Examples" Lines="6" />
							}

						</div>
					</div>
				</div>
			</MudPaper>

		</MudStep>
		<!-- Step 3. -->
		<MudStep Title="Data Analysis" Class="h-full flex-auto">
			<MudPaper Class="h-full px-32">

				<div class="@(_chartLoaded == false ? "invisible" : "visible")">

					<MudText Class="pt-12">Calculated Sleep Scores:</MudText>

					<MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Class="mt-12 ml-16 border-2 shadow p-12" ChartOptions="ChartOptions" Width="80%" />

				</div>

			</MudPaper>
		</MudStep>

	</MudStepper>

</MudPaper>

<input id="fileInput" type="file" style="display:none" @onchange="HandleFileSelection" />
<script>
	function StartFileUpload() {
		document.getElementById('fileInput').click();
	}
</script>

@code {

	private bool _chartLoaded = false;
	private string stringValue { get; set; }
	private BlazorDiagram? Diagram { get; set; }
	private WorkflowNodeViewModel? SelectedPrompt { get; set; }
	private List<TextInput> TextInputs { get; set; } = new();
	private Workflow CurrentWorkflow { get; set; }
	private List<Workflow> Workflows { get; set; } = new();
	private List<ChartSeries> Series = new List<ChartSeries>()
	{
		new ChartSeries() { Name = "Sleep Quality", Data = new double[] { 7, 6, 6, 5, 9} },
	};
	private string[] XAxisLabels = { "Tue", "Wed", "Thu", "Fri", "Sat" };

	private ChartOptions ChartOptions = new ChartOptions()
		{
			YAxisTicks = 5,
			LineStrokeWidth = 5
		};

	// Todo: Clean this up...
	protected override async Task OnInitializedAsync()
	{
		InitializeDiagram();
		LoadDummyInputs();
		LoadDummyWorkflow();
	}

	private void InitializeDiagram()
	{
		var opt = new BlazorDiagramOptions();
		opt.AllowPanning = false;
		opt.Zoom.Enabled = false;
		opt.AllowMultiSelection = false;
		opt.Virtualization.Enabled = false;

		Diagram = new BlazorDiagram(opt);

		Diagram.RegisterComponent<SystemNodeViewModel, SystemComponent>();
		Diagram.RegisterComponent<WorkflowNodeViewModel, PromptComponent>();

		Diagram.SelectionChanged += Diagram_OnSelectionChanged;

	}


	private void Diagram_OnSelectionChanged(SelectableModel model)
	{
		if (model is WorkflowNodeViewModel prompt)
			SelectedPrompt = prompt;

		StateHasChanged();
	}


	private void LoadDummyInputs()
	{
		TextInputs.AddRange([
			new()
			{
				Expanded = true,
				DateTime = DateTime.Parse("12/01/2024"),
				DisplayName = "Journal Entry",
				TextBody = @"Started the day with some energy for once. Went to the gym—felt kind of good to move, even though I didn’t stay long. Grabbed a smoothie after, strawberry-banana. Not bad.
Spent the afternoon on campus trying to catch up on readings. The library was packed, and I couldn’t focus. Ended up people-watching instead.
Dinner was tacos with Emma. She kept asking about my thesis, and I changed the subject. Came home and binged a few episodes of Parks and Rec. That show feels like a hug."
			},
	new()
			{
				DateTime = DateTime.Parse("12/02/2024"),
				DisplayName = "Journal Entry",
				TextBody = @"Didn’t sleep well. I kept thinking about whether I’m even cut out for this program. Dragged myself to class and sat in the back. Barely took notes—just kind of zoned out.
Tried to be productive at the café, but I forgot my charger, so that was a bust. Got a croissant, though, and it was flaky perfection.
Came home and stared at my planner for an hour. There’s so much to do, but I couldn’t even start. Dinner was cereal because I didn’t feel like cooking."
			},
	new()
			{
				DateTime = DateTime.Parse("12/03/2024"),
				DisplayName = "Journal Entry",
				TextBody = @"Snoozed my alarm three times. Finally got up when I realized I had a meeting. Went in sweats because I couldn’t deal with finding something decent to wear.
The meeting was fine, I guess. Group work is so awkward—everyone just kind of talks over each other. Came home and lay on the couch for a while scrolling my phone.
Forgot to eat lunch. Ordered pizza for dinner, but it wasn’t even that good. Spent the evening trying to work on my thesis, but I just kept rewriting the same paragraph."
			},
	new()
			{
				DateTime = DateTime.Parse("12/04/2024"),
				DisplayName = "Journal Entry ",
				TextBody = @"Woke up feeling off. Like, not sad exactly, just heavy. Stayed in bed for a while and finally got up because I couldn’t stand staring at the ceiling anymore.
Class was boring. I doodled in my notebook instead of paying attention. Lunch was instant noodles, even though I bought groceries yesterday. Didn’t leave the apartment after that.
Tried watching a movie, but I couldn’t focus. Ended up lying on the couch, thinking about how behind I am. Emma texted asking if I wanted to grab dinner, but I told her I was busy. I wasn’t."
			},
	new()
			{
				DateTime = DateTime.Parse("12/05/2024"),
				DisplayName = "Journal Entry",
				TextBody = @"Stayed up too late last night. Woke up with that gross, fuzzy-brain feeling. Didn’t even bother going to class. What’s the point if I’m not going to listen anyway?
Stayed in bed most of the day, scrolling TikTok. Saw a video about someone graduating, and it made me feel weird. Like, happy for them, but also… I don’t know. Stuck?
Ate a granola bar because I felt shaky. That’s all I’ve had today. I should probably eat something real, but nothing sounds good. Left my laptop open for hours and didn’t type a single word."
			}
		]);
	}

	private void LoadDummyWorkflow()
	{
		// Sleep Workflow:
		var clinicalWorkflow = new Workflow()
			{
				Title = "Clinical Risk Factor Analysis"
			};

		var clinical_startNode = new SystemNode(new Point(324, 35), SystemComponentType.StartNode);

		var clinical_focusExtractorNode = new ValueExtractorNode(
			new Point(306, 92),
			title: "Concentration",
			role: @"You are an advanced language model designed to analyze text and evaluate focus and concentration levels based on explicit and implicit indicators, using a weighted system to determine the significance of terms.",
			task: @"Your task is to evaluate text for references to focus and concentration issues, assigning a score between 0 (no relevant indicators) and 1–5 to reflect varying degrees of focus. Use the provided framework to weigh the importance of terms and calculate scores based on frequency and severity of indicators.",
			context: @"Scoring Framework:
- Mild Terms (weight 1): Represent minor distractions or occasional lapses in focus.
Examples: 'daydreaming,' 'lost track of time,' 'a bit distracted.'
- Moderate Terms (weight 2): Noticeable struggles with attention or focus.
Examples: 'zoning out,' 'couldn’t stay on task,' 'forgot what I was doing.'
- Severe Terms (weight 3): Reflect significant focus or concentration difficulties.
Examples: 'mind feels foggy,' 'couldn’t think straight,' 'thoughts keep jumping,' 'forgot important tasks.'

Calculation Example:
- Entry: 'I kept zoning out (weight 2) and forgot what I was doing (weight 2).'
Total Weight: 2 + 2 = 4 (Moderate Focus: Score 3)
- Entry: 'My mind feels foggy (weight 3), I couldn’t think straight (weight 3), and thoughts kept jumping (weight 3).'
Total Weight: 3 + 3 + 3 = 9 (Low Focus: Score 1)",

			examples: @"Input: 'I was zoning out all day and couldn’t stay on task.'
Output: Score: 3 (Moderate Focus)
Input: 'I was focused and got everything done without distractions.'
Output: Score: 5 (High Focus)
Input: 'My mind was foggy, and I forgot two meetings because I couldn’t concentrate.'
Output: Score: 1 (Very Low Focus)"
		);

		var clinical_energyExtractorNode = new ValueExtractorNode(
			new Point(305, 195),
			title: "Mental Energy",
			role: @"You are an advanced language model designed to analyze text and evaluate mental energy levels based on explicit and implicit indicators, using a weighted system to calculate scores that reflect varying degrees of mental energy.",
			task: @"Your task is to evaluate text for references to mental energy, assigning a score between 0 (no relevant indicators) and 1–5 to reflect different energy levels. Use the provided framework to weigh the significance of terms and calculate scores based on frequency and intensity of indicators.",
			context: @"Scoring Framework:
- Low Energy Terms (weight 1): Represent mild sluggishness or slight dips in energy.
Examples: 'a bit tired,' 'felt slow,' 'needed a little push.'
- Moderate Energy Terms (weight 2): Noticeable fatigue or lack of motivation.
Examples: 'exhausted,' 'mentally drained,' 'everything felt harder.'
- Severe Energy Depletion (weight 3): Reflects significant fatigue or extreme energy deficits.
Examples: 'couldn’t bring myself to move,' 'felt heavy all day,' 'drained physically and mentally.'

Calculation Example:
- Entry: 'I felt a bit tired (weight 1), and everything felt harder than usual (weight 2).'
Total Weight: 1 + 2 = 3 (Moderate Energy: Score 3)
- Entry: 'I was mentally drained (weight 2), couldn’t bring myself to move (weight 3), and felt heavy (weight 3).'
Total Weight: 2 + 3 + 3 = 8 (Low Energy: Score 1)",

			examples: @"Input: 'I’ve been really exhausted and couldn’t bring myself to do anything today.'
Output: Score: 2 (Moderate Energy)
Input: 'I feel awake and motivated to take on the day.'
Output: Score: 5 (High Energy)
Input: 'I couldn’t get started, felt drained, and everything took extra effort.'
Output: Score: 1 (Very Low Energy)"
		);

		var clinical_sleepExtractorNode = new ValueExtractorNode(
			new Point(302, 296),
			title: "Sleep Quality",
			role: @"You are an advanced language model designed to analyze text and score different aspects of sleep quality based on explicit and implicit indicators, using a weighted system to evaluate the significance of terms.",
			task: @"Your task is to evaluate text for references to sleep quality, assigning a score between 0 (no relevant indicators) and 1–5 to reflect varying degrees of quality. Use the provided theory to weigh the importance of terms and calculate scores based on frequency and severity of indicators.",
			context: @"Scoring Framework:
- Mild Terms (weight 1): Represent light symptoms or minor issues.
Examples: 'tired,' 'a bit restless,' 'slightly awake.'
- Moderate Terms (weight 2): Noticeable sleep-related discomfort.
Examples: 'exhausted,' 'couldn't fall asleep,' 'kept waking up.'
- Severe Terms (weight 3): Reflect serious issues impacting sleep.
Examples: 'fatigued,' 'insomnia,' 'restless all night.'

Calculation Example:
- Entry: 'I feel tired (weight 1), and I kept waking up all night (weight 2).'
Total Weight: 1 + 2 = 3 (Moderate Quality: Score 3)
- Entry: 'I had insomnia (weight 3), felt fatigued (weight 3), and couldn’t sleep at all (weight 3).'
Total Weight: 3 + 3 + 3 = 9 (Low Quality: Score 1)",

			examples: @"Input: 'I’ve been really tired and couldn’t fall asleep last night.'
Output: Score: 3 (Moderate Quality)
Input: 'I slept great and feel refreshed.'
Output: Score: 5 (High Quality)
Input: 'Insomnia has been keeping me awake for days, I feel drained.'
Output: Score: 1 (Very Low Quality)"
		);

		var clinical_dietExtractorNode = new ValueExtractorNode(
			new Point(299, 396),
			title: "Diet & Appetite",
			role: @"You are an advanced language model designed to analyze text and score different aspects of diet and appetite based on explicit and implicit indicators, using a weighted system to evaluate the significance of terms.",
			task: @"Your task is to evaluate text for references to diet and appetite, assigning a score between 0 (no relevant indicators) and 1–5 to reflect varying degrees of dietary balance and appetite health. Use the provided theory to weigh the importance of terms and calculate scores based on frequency and severity of indicators.",
			context: @"Scoring Framework:
- Mild Terms (weight 1): Represent minor appetite changes or occasional dietary irregularities.
Examples: 'ate,' 'snacked,' 'felt full,' 'hungry but managed to eat.'
- Moderate Terms (weight 2): Noticeable irregularities or moderate appetite changes.
Examples: 'skipped breakfast,' 'snacked all day,' 'felt cravings,' 'ate late meal,' 'forgot to eat.'
- Severe Terms (weight 3): Reflect significant dietary disruptions or appetite issues.
Examples: 'kept eating out of boredom,' 'eating to fill a void,' 'didn’t feel like eating,' 'couldn’t stomach food,' 'no appetite,' 'overeating throughout the day.'

Calculation Example:
- Entry: 'I snacked throughout the day (weight 2) and skipped breakfast (weight 2).'
Total Weight: 2 + 2 = 4 (Moderate Balance: Score 3)
- Entry: 'I had no appetite (weight 3), couldn’t stomach food (weight 3), and missed meals all day (weight 3).'
Total Weight: 3 + 3 + 3 = 9 (Very Low Balance: Score 1)",

			examples: @"Input: 'I felt hungry and ate a small meal.'
Output: Score: 4 (High Balance)
Input: 'I skipped breakfast and snacked on junk food all day.'
Output: Score: 3 (Moderate Balance)
Input: 'I kept eating to fill a void and didn’t feel like eating anything healthy.'
Output: Score: 1 (Very Low Balance)"
		);

		var clinical_activityExtractorNode = new ValueExtractorNode(
			new Point(295, 497),
			title: "Activity Engagement",
			role: @"You are an advanced language model designed to analyze text and score engagement with physical activities based on explicit and implicit indicators, using a weighted system to evaluate the significance of terms.",
			task: @"Your task is to evaluate text for references to physical activity or inactivity, assigning a score between 0 (no relevant indicators) and 1–5 to reflect varying levels of engagement. Use the provided framework to weigh the importance of terms and calculate scores based on frequency and severity of indicators.",
			context: @"Scoring Framework:
- Mild Terms (weight 1): Indicate minimal or low activity engagement.
Examples: 'walked a little,' 'some movement,' 'light exercise.'
- Moderate Terms (weight 2): Suggest moderate levels of engagement or effort.
Examples: 'went for a walk,' 'did yoga,' 'active for a bit.'
- High Terms (weight 3): Reflect significant effort or high activity engagement.
Examples: 'ran several miles,' 'intense workout,' 'spent hours at the gym.'

Indicators of inactivity reduce the overall score:
- Mild Indicators (weight -1): Light inactivity or low energy descriptions.
Examples: 'felt a bit lazy,' 'didn’t do much today.'
- Moderate Indicators (weight -2): Noticeable lack of activity.
Examples: 'stayed home all day,' 'too tired to move.'
- Severe Indicators (weight -3): Reflect complete inactivity or avoidance.
Examples: 'couldn’t get out of bed,' 'avoided all movement,' 'no energy to move.'

Calculation Example:
- Entry: 'I walked a little (weight 1) and did yoga (weight 2), but I stayed home most of the day (weight -2).'
Total Weight: 1 + 2 - 2 = 1 (Low Engagement: Score 2)
- Entry: 'Ran 5 miles (weight 3), went to the gym (weight 3), and stayed active (weight 2).'
Total Weight: 3 + 3 + 2 = 8 (High Engagement: Score 5)",
			examples: @"Input: 'I walked around the block and did some light yoga.'
Output: Score: 3 (Moderate Engagement)
Input: 'I stayed home all day and didn’t feel like doing anything.'
Output: Score: 1 (Very Low Engagement)
Input: 'I ran 10k, went to the gym, and kept moving all day.'
Output: Score: 5 (High Engagement)"
		);

		var clinical_endNode = new SystemNode(new Point(315, 585), SystemComponentType.EndNode);

		clinicalWorkflow.Nodes.Add(clinical_startNode);
		clinicalWorkflow.Nodes.Add(clinical_focusExtractorNode);
		clinicalWorkflow.Nodes.Add(clinical_energyExtractorNode);
		clinicalWorkflow.Nodes.Add(clinical_sleepExtractorNode);
		clinicalWorkflow.Nodes.Add(clinical_dietExtractorNode);
		clinicalWorkflow.Nodes.Add(clinical_activityExtractorNode);
		clinicalWorkflow.Nodes.Add(clinical_endNode);

		clinicalWorkflow.Links.Add(new WorkflowLink(clinical_startNode, clinical_focusExtractorNode));
		clinicalWorkflow.Links.Add(new WorkflowLink(clinical_focusExtractorNode, clinical_energyExtractorNode));
		clinicalWorkflow.Links.Add(new WorkflowLink(clinical_energyExtractorNode, clinical_sleepExtractorNode));
		clinicalWorkflow.Links.Add(new WorkflowLink(clinical_sleepExtractorNode, clinical_dietExtractorNode));
		clinicalWorkflow.Links.Add(new WorkflowLink(clinical_dietExtractorNode, clinical_activityExtractorNode));
		clinicalWorkflow.Links.Add(new WorkflowLink(clinical_activityExtractorNode, clinical_endNode));

		Workflows.Add(clinicalWorkflow);

		try
		{

			// Export workflow to JSON
			//string filePath = "workflow.json";
			//workflow.ExportToJson(filePath);

			// Load workflow from JSON
			//var loadedWorkflow = Workflow.LoadFromJson(filePath);

			//loadedWorkflow.Build(Diagram);

			clinicalWorkflow.BuildDiagram(Diagram);
			CurrentWorkflow = clinicalWorkflow;

		}
		catch (Exception ex)
		{
			Console.WriteLine("Err {eex}");
		}
	}

	private void NewTextInput()
	{
		TextInputs.Add(new()
			{
				DisplayName = "New Entry",
				DateTime = DateTime.Now,
				TextBody = "",
			});
		StateHasChanged();
	}

	private async Task UploadTextInputs()
	{
		await JS.InvokeVoidAsync("StartFileUpload");
	}

	private void OnSelectedWorkflowChanged()
	{
		Diagram.Nodes.Clear();
		Diagram.Links.Clear();
		CurrentWorkflow.BuildDiagram(Diagram);
	}

	private async Task OnStepperIndexChanged(int index)
	{
		if (index == 2)
		{
			await OpenDialogAsync();
		}
	}

	private Task OpenDialogAsync()
	{
		var task = CurrentWorkflow.ExecuteWorkflow(TextInputs);

		task.ContinueWith(previousTask =>
		{
			var scoreCards = previousTask.Result;


			var chartValues = new List<ChartSeries>();

			foreach (var card in scoreCards)
			{
				var id = card.id;
				var scores = card.card;

				var name = (CurrentWorkflow.Nodes.Where(node => node.Id == id).SingleOrDefault() as ValueExtractorNode).Title;
				var scoreDouble = new double[]
				{
					(double) scores.Input1,
					(double) scores.Input2,
					(double) scores.Input3,
					(double) scores.Input4,
					(double) scores.Input5,
				};

				chartValues.Add(new ChartSeries()
					{
						Name = name,
						Data = scoreDouble
					});
			}
			Series = chartValues;
			XAxisLabels = TextInputs.Select(item => item.DateTime.Value.ToString("dd/MM/yyyy")).ToArray();

			_chartLoaded = true;
			StateHasChanged();
		});

		var options = new DialogOptions { CloseOnEscapeKey = true };
		var parameters = new DialogParameters<PendingDialog>
		{
			{ x => x.ExecutionTask, task }
		};

		return DialogService.ShowAsync<PendingDialog>("Executing Workflow", parameters, options);
	}

	private async Task HandleFileSelection(ChangeEventArgs e)
	{
		// Get the selected files
		var files = e.Value as IReadOnlyList<IBrowserFile>;
		if (files != null && files.Count > 0)
		{
			foreach (var file in files)
			{
				using var stream = file.OpenReadStream();
				using var reader = new StreamReader(stream);
				var content = await reader.ReadToEndAsync();

				try
				{
					var loadedTextInput = JsonSerializer.Deserialize<TextInput>(content);
					TextInputs.Add(loadedTextInput);

				}
				catch (Exception ex)
				{
					Console.WriteLine($"Err: {ex}");
				}
			}
		}
	}

	private void DeleteTextInput(TextInput textInput)
	{
		TextInputs.Remove(textInput);
	}


}
